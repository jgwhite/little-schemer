grammar LittleScheme
  rule sequence
    (space* expression space*)* {
      def to_ast
        elements.map { |n| n.expression.to_ast }
      end
    }
  end

  rule expression
    quote / list / atom
  end

  rule quote
    "'" expression {
      def to_ast
        [:quote, expression.to_ast]
      end
    }
  end

  rule list
    '(' sequence ')' {
      def to_ast
        sequence.to_ast
      end
    }
  end

  rule atom
    numeric_atom / non_numeric_atom
  end

  rule numeric_atom
    integer / float
  end

  rule non_numeric_atom
    [^'()\s] [^()\s]* {
      def to_ast
        text_value.to_sym
      end
    }
  end

  rule integer
    [0-9]+ {
      def to_ast
        text_value.to_i
      end
    }
  end

  rule float
    [0-9]* '.' [0-9]+ {
      def to_ast
        text_value.to_f
      end
    }
  end

  rule space
    [\s\t\n]
  end
end
